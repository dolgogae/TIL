package com.company;

import java.util.Random;

public class Main {

    public static void main(String[] args) {
	// write your code here
        Random rand = new Random();
        System.out.println("Random number: "+rand.nextInt(50));



    }
}


// java는 크로스 플랫폼
// 특정 언어로 작성한 코드를 여러 플랫폼에서 실행할 수 있다는 의미

// 컴파일을 하면 실행 파일이 나옴.
// 실행 파일은 기계어이며 운영체제가 직접 실행하는 파일
// 각 운영체제/ 디바이스에서 실행파일을 따로 만들어야 함.

// 자바의 컴파일 모델
// 코드를 컴파일 한 결과는 바이트 코드
// 실행파일이 아님

// 바이트 코드란?
// 운영체제/디바이스가 이해하는 기계어가 아님
// JVM이라는 특수한 프로그램이 이해하는 명령어
// JVM이 실행 중 최종 플랫폼에 맞는 명령어로 바꿔서 실행
// JVM에 맞게 최적화 -> 속도는 느림.

// JVM이 바이트 코드를 실제 디바이스에서 실행하는 방식은 다양
// 과거 JVM은 인터프리터 방식으로 동작
// 최신 JVM은 JIT(just in time) 컴파일을 추가
// 여러가지 컴파일 방식이 공존하는 형태

// 기존 패키지 시스템의 한계
// 애플리케이션이 사용하는 클래스 목록을 찾는 공식적인 방법이 없음
// - 누락된 클래스가 있다면 실행중 그것을 사용하려 할때 오류 발생
// - 따라서 사용중인 패키지에 있는 모든 클래스를 같이 배포하는 게 일반적
// 문제점
// -> java 버전이 증가함에 따라 Java자체 제공 라이브러리 크기가 커짐
// -> 안 사용하는 클래스까지 같이 배포할 경우 쓸데없이 용량이 커짐

// 패키지 안에 있는 모든 public 클래스를 아무나 사용할 수 있음.
// 때로는 일부만 노출하고 싶음


// 모듈
// 정말 필요한 패키지만 포함할 수 있음(경량화)
// 프로그램 시작 시 누락된 모듈을 확인 가능
// 어떤 모듈이 사용하는 다른 모듈 목록을 찾기 쉬움
// 모듈 사용자에게 공개할 클래스를 특정할 수 있음