모니터링

좀비 프로세스 모니터링
access.redhat.com/ko/solution/778063

부하 == work load, cpu load, CPU의 스케줄링 상태를 보통 이야기함.(ForGround,BackGround, Idle(x))

5초마다 커널은 실행 가능 및 중단되지 않는 상태의 프로세스 수를 기반으로 현재 부하 수치를 수집합니다.

Kernel(5s)(Count((all process)(scheduler_avilablility))) ;; 5s 마다 특정영역에 숫자를 갱신
-> # uptime ; 30~60min, 실시간 정보가 아님.
-> watch -n1 'uptime'   ;; 매 1초마다 uptime 명령어 실행

BSD(unix): PROC.A: 0core (0~100, hold)                        == CPU 100%
LINUX: PROC.B: 0core(0~10), 11core(11~30), load 1dl ehldjTek. == CPU 100%

Load 1 = pCore(1) Util(100%)
        --> Linux Kernel 3.x -> 4, 5: Kernel Protect(95%)
        --> 1 1GHz, PROC.A~~ 300M last(700M): 
            100%쓴다 라고하면 보통은 시분할 영역이 거의 분할율이 1G대역 다 쓰고 있음
            스케줄러에서 계속 큐에 저장후 대기 상태
            1(1.3-130%, 1.8-180%....)을 넘어가는 것은 q에 대기 중인 상태를 모두 포함해서 나타나는 것이다.

top 명령어는 계산이 들어가기 때문에 cpu에 부하가 간다(+프로세스 갯수가 많으면 느림)-> 서버에서 적당하지 않다.
-> 쓸때는 s를 눌러서 수집 시간 단위를 정해주자
uptime을 자주 쓰되, 정확하게 볼때 top을 쓰자...

vmstat : 실시간에 가까운 정보
# vmstat -S M       1           10    // 1초에 10번씩
            --     ---          ---
            unit   update time  count

[정리]
uptime: 실시간은 아님 -> top: 보기는 편하지만, 워크로드가 노음 
-> vmstat: 보기는 좀 불편하지만 io, cpu, mem 상황을 한번에 볼 수 있음.

ps aux vs. ps -ef           ;; 둘다 cpu여유가 있을때 사용
-ef를 권장: 출력해주는 속도가 좀 더 빠르다.

ps -opid, uid cmd -ef       ;; cpu 여유가 없을 때, o 옵션을 이용해서 필요한 정보만


Mac이 워크로드가 높은 프로세싱에서는 힘들다.

** ULE vs CFS

cockpit: 웹페이지 기반 로그인


컨테이너

RH Based
Docker == Podman
K8S == Docker, CRIO(RH)
OCI(Open Container Initialtive)

Google, VM기반으로 주요 서비스를 구성
        Linux/BSD쪽에서 가상머신 기술이나 혹은 비슷한 기술(Container)
        -> vServer: GNU(container + VM), Linux on Linux
           - RH/SuSE와 같은 회사는 Everything on Linux
             * QEMU ---> VirtualBox(반가상화)
             * QEMU ---> RH ---> QEMU + KVM: oVirt, libvirtd
             * VMware vs. ??
               - VMware vs QEMU/KVM(RHV)
               - VMware vs Xen(초기 인기)
         -> System ENG: 가상머신은 무겁다.
            -> RH: Docker 부상후 CoreOS인수(from google)
               * Openshift -> Container + Google(k8s)
               * Openshift: Single Cluster
               * Openshift: Product(서비스 운영 지향)
               * Kubernetes: Project(프로젝트 단위 서비스)

            -> chroot -> lxc -> lxd -> docker -> Google
                GNU      IBM    UBT       |       [k8s]
                          \     /         '---> ==container (명령어 및 이미지 산업표준)
                           '---'           
                           ring 재구성
                        (lightware VM)      (rootless)
                                            - root 영역이 없음 -> boot 과정이 없음

           namespace: 스토리지 및 네트워크 같은 장치를 전달받음
           ---------

--------- PODMAN ----------
        # dnf install podman -y
        # cd /proc/$$/ns        ;; namespace 영역이돌
        # ls -label
        # lsns                  ;; namespace 조회


        [namespace]
          isolate
-------------------                                   |   
        +container+ ---                    net <----+-| POD | 
        |  <app>  |  <-->  [namespace] <--         /  |   \
        '---------'                        mnt <--'        \
             \                                              * cgroup
              \
               * cgroup
            Resource tracking/limit

        -> Jails  : BSD(container), BSD on BSd
            - 별다른 이기종 가상화 기능에 대한 성과가 없음
            - 컨테이너쪽으로 더 집중

              [single]                  [single+light]
         docker(alter)----.           .----k8s
                           \         /
                            \       /
                        + Podman/CRI-O(OSS,RH)
                        + Docker(ENT,UBT,) ---> containerd(docker-core, STD)
                        |
                        [RUNTIME/ENGINE]
                            QEMU        userspace    ----+
                           --------                      |
                            kernel                       |
                                 +  namspace(d)          |
                                 +  cgroup(d)            |
                                 +  seccomp              |
                                        kernelspace  ----+

                        [kvm/container]


컨테이너는 "사용 영역에 대해서 제한"이 있음
  1. Low 영역은 접근 불가
    * namespace(rootless)
  2. TCP/UDP, 상태별로 다름
    * statless에 최적
    * statful에는 최악  --> MSA(API기반으로 작성 권장(http/https))
      - mac, ip, dev 전부 임시(가짜)
      - 언제든지 삭제가 가능
      - http/https같은 서비스에는 좋음
        * udp/tcp에서는 제한적임
    * Game 서버처럼 tcp로 지속적인 통신이 필요한 경우
      - service 계층을 잘 이용해야함.
  3. 성능 부분
    * 저성능 / 병렬처리
    * Total Containers = APP(가용 용량)*X(최대 허용) ## 수평처리 고려
    * AI/ML에서는 각광
  4. 관리 부분(컨테이너 인프라에 맞는 방법을 찾아야함.)
    * 스토리지(Container Storage Interface)
    * 네트워크(Container Network Interface)
    * 보안   (Container Security Specification)
    * 모니터링(자체적으로)
  5. POD에 대한 오해
    * 잘 알아야함
    * 리눅스 커널 및 시스템 시스템 인프라에 대한 전반적인 지식
    * 네트워크 지식 요구

POD 자원들은 POD이름을 가져오게 된다.

RHEL module의 역할
버전 별로 선택해서 설치할 수 있도록 해놓은 것.

/var/lib/containers/storage/libpod 
container를 띄울때 => overlay, overlay-containers
image를 저장할때 => overlay-images, overlay-layerss


                                    [절대 컨테이너에 데이터를 저장하지 말아라] -> 털림

                                  .------> container 3 (R/W) ---> DIR
                                  | data
                                  +------> container 2 (R/W) ---> DIR
                                  | data
                                  +------> container 1 (R/W) ---> DIR
                                  | data
                                  |
                                  | Overlay FILESYSTEM
                                  | [MEMORY LOADED]
                                  | [backingFSBlockDev]
                                  | 
                                  |
# podman create x 3         | container image |
                                [R/O]
                                 > Library
                                 > Application

- container/pod 구조
- network(namespace)
- runtime(crio, podman)

docker ---> dockerd ---> docker-containerd --->

podman ---> conmon ---> '-r: runtime' ---> runc ---> container (userspace)
 |   [container monitoring]            [runtime container]      -----------
 |                                                             kernelspace
 `--> meta data 관리(/var/lib/container)


iptables-save -> 포트구성 확인하기

                             # ip link                       # bridge fdb
podman -p: APP(8080/tcp) ---> veth <--- iptables --- NAT --- Linux Bridge --- DEV
                                        (S/D NAT) S       D
                                        # iptables-save

* veth는 리눅스의 버추얼 이더넷 인터페이스를 의미합니다. veth는 쌍으로 만들어지며 네트워크 네임스페이스들을 터널로서 연결하거나, 물리 디바이스와 다른 네트워크 네임스페이스의 장비를 연결하는 용도로 사용할 수 있습니다.





    INGRESS (nginx, haproxy)
    [Domain]
-----|-----------
     |
    SRV     [ip+port]
     |      Cluster ip(VIP)
     |
  externel
-----|-----------
    POD     [ip]  <--- tunnel --> POD
     |      Endpoint ip
-----|-----------
     | 
     |
    APP     [ip]        APP     [ip]        APP     [ip]
    (c)                 (c)                 (c)         
-----------------
